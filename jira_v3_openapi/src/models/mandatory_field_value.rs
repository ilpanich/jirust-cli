/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-4168ca0e5efc137ea4ff4f0cf29358bf64e26f02
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// MandatoryFieldValue : List of string of inputs
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MandatoryFieldValue {
    /// If `true`, will try to retain original non-null issue field values on move.
    #[serde(rename = "retain", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub retain: Option<Option<bool>>,
    /// Will treat as `MandatoryFieldValue` if type is `raw` or `empty`
    #[serde(rename = "type", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Option<Type>>,
    /// Value for each field. Provide a `list of strings` for non-ADF fields.
    #[serde(rename = "value")]
    pub value: Vec<String>,
}

impl MandatoryFieldValue {
    /// List of string of inputs
    pub fn new(value: Vec<String>) -> MandatoryFieldValue {
        MandatoryFieldValue {
            retain: None,
            r#type: None,
            value,
        }
    }
}
/// Will treat as `MandatoryFieldValue` if type is `raw` or `empty`
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "adf")]
    Adf,
    #[serde(rename = "raw")]
    Raw,
}

impl Default for Type {
    fn default() -> Type {
        Self::Adf
    }
}

