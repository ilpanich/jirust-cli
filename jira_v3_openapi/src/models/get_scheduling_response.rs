/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-4168ca0e5efc137ea4ff4f0cf29358bf64e26f02
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetSchedulingResponse {
    /// The dependencies for the plan. This is \"Sequential\" or \"Concurrent\".
    #[serde(rename = "dependencies")]
    pub dependencies: Dependencies,
    /// The end date field for the plan.
    #[serde(rename = "endDate")]
    pub end_date: Box<models::GetDateFieldResponse>,
    /// The estimation unit for the plan. This is \"StoryPoints\", \"Days\" or \"Hours\".
    #[serde(rename = "estimation")]
    pub estimation: Estimation,
    /// The inferred dates for the plan. This is \"None\", \"SprintDates\" or \"ReleaseDates\".
    #[serde(rename = "inferredDates")]
    pub inferred_dates: InferredDates,
    /// The start date field for the plan.
    #[serde(rename = "startDate")]
    pub start_date: Box<models::GetDateFieldResponse>,
}

impl GetSchedulingResponse {
    pub fn new(dependencies: Dependencies, end_date: models::GetDateFieldResponse, estimation: Estimation, inferred_dates: InferredDates, start_date: models::GetDateFieldResponse) -> GetSchedulingResponse {
        GetSchedulingResponse {
            dependencies,
            end_date: Box::new(end_date),
            estimation,
            inferred_dates,
            start_date: Box::new(start_date),
        }
    }
}
/// The dependencies for the plan. This is \"Sequential\" or \"Concurrent\".
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Dependencies {
    #[serde(rename = "Sequential")]
    Sequential,
    #[serde(rename = "Concurrent")]
    Concurrent,
}

impl Default for Dependencies {
    fn default() -> Dependencies {
        Self::Sequential
    }
}
/// The estimation unit for the plan. This is \"StoryPoints\", \"Days\" or \"Hours\".
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Estimation {
    #[serde(rename = "StoryPoints")]
    StoryPoints,
    #[serde(rename = "Days")]
    Days,
    #[serde(rename = "Hours")]
    Hours,
}

impl Default for Estimation {
    fn default() -> Estimation {
        Self::StoryPoints
    }
}
/// The inferred dates for the plan. This is \"None\", \"SprintDates\" or \"ReleaseDates\".
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum InferredDates {
    #[serde(rename = "None")]
    None,
    #[serde(rename = "SprintDates")]
    SprintDates,
    #[serde(rename = "ReleaseDates")]
    ReleaseDates,
}

impl Default for InferredDates {
    fn default() -> InferredDates {
        Self::None
    }
}

