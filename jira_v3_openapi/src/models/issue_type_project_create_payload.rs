/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-4f9780d932de14e7c3dec0c9382f8855050fda22
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// IssueTypeProjectCreatePayload : The payload for creating issue types in a project
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IssueTypeProjectCreatePayload {
    /// Defines the issue type hierarhy to be created and used during this project creation. This will only add new levels if there isn't an existing level
    #[serde(rename = "issueTypeHierarchy", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub issue_type_hierarchy: Option<Option<Vec<models::IssueTypeHierarchyPayload>>>,
    #[serde(rename = "issueTypeScheme", skip_serializing_if = "Option::is_none")]
    pub issue_type_scheme: Option<Box<models::IssueTypeSchemePayload>>,
    /// Only needed if you want to create issue types, you can otherwise use the ids of issue types in the scheme configuration
    #[serde(rename = "issueTypes", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub issue_types: Option<Option<Vec<models::IssueTypePayload>>>,
}

impl IssueTypeProjectCreatePayload {
    /// The payload for creating issue types in a project
    pub fn new() -> IssueTypeProjectCreatePayload {
        IssueTypeProjectCreatePayload {
            issue_type_hierarchy: None,
            issue_type_scheme: None,
            issue_types: None,
        }
    }
}

