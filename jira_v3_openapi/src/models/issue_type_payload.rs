/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-4f9780d932de14e7c3dec0c9382f8855050fda22
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// IssueTypePayload : The payload for creating an issue type
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IssueTypePayload {
    /// The avatar ID of the issue type. Go to https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-avatars/\\#api-rest-api-3-avatar-type-system-get to choose an avatarId existing in Jira
    #[serde(rename = "avatarId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub avatar_id: Option<Option<i64>>,
    /// The description of the issue type
    #[serde(rename = "description", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub description: Option<Option<String>>,
    /// The hierarchy level of the issue type. 0, 1, 2, 3 .. n; Negative values for subtasks
    #[serde(rename = "hierarchyLevel", skip_serializing_if = "Option::is_none")]
    pub hierarchy_level: Option<i32>,
    /// The name of the issue type
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The conflict strategy to use when the issue type already exists. FAIL - Fail execution, this always needs to be unique; USE - Use the existing entity and ignore new entity parameters
    #[serde(rename = "onConflict", skip_serializing_if = "Option::is_none")]
    pub on_conflict: Option<OnConflict>,
    #[serde(rename = "pcri", skip_serializing_if = "Option::is_none")]
    pub pcri: Option<Box<models::ProjectCreateResourceIdentifier>>,
}

impl IssueTypePayload {
    /// The payload for creating an issue type
    pub fn new() -> IssueTypePayload {
        IssueTypePayload {
            avatar_id: None,
            description: None,
            hierarchy_level: None,
            name: None,
            on_conflict: None,
            pcri: None,
        }
    }
}
/// The conflict strategy to use when the issue type already exists. FAIL - Fail execution, this always needs to be unique; USE - Use the existing entity and ignore new entity parameters
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OnConflict {
    #[serde(rename = "FAIL")]
    Fail,
    #[serde(rename = "USE")]
    Use,
    #[serde(rename = "NEW")]
    New,
}

impl Default for OnConflict {
    fn default() -> OnConflict {
        Self::Fail
    }
}

