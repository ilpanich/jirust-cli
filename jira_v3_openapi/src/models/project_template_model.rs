/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-076cd4f44b0487c600c6a2c6fd87f6323c1ed5c5
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProjectTemplateModel {
    #[serde(rename = "archetype", skip_serializing_if = "Option::is_none")]
    pub archetype: Option<Box<models::ProjectArchetype>>,
    #[serde(rename = "defaultBoardView", skip_serializing_if = "Option::is_none")]
    pub default_board_view: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "liveTemplateProjectIdReference", skip_serializing_if = "Option::is_none")]
    pub live_template_project_id_reference: Option<i64>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "projectTemplateKey", skip_serializing_if = "Option::is_none")]
    pub project_template_key: Option<Box<models::ProjectTemplateKey>>,
    #[serde(rename = "snapshotTemplate", skip_serializing_if = "Option::is_none")]
    pub snapshot_template: Option<std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "templateGenerationOptions", skip_serializing_if = "Option::is_none")]
    pub template_generation_options: Option<Box<models::CustomTemplateOptions>>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
}

impl ProjectTemplateModel {
    pub fn new() -> ProjectTemplateModel {
        ProjectTemplateModel {
            archetype: None,
            default_board_view: None,
            description: None,
            live_template_project_id_reference: None,
            name: None,
            project_template_key: None,
            snapshot_template: None,
            template_generation_options: None,
            r#type: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "LIVE")]
    Live,
    #[serde(rename = "SNAPSHOT")]
    Snapshot,
}

impl Default for Type {
    fn default() -> Type {
        Self::Live
    }
}

