/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-076cd4f44b0487c600c6a2c6fd87f6323c1ed5c5
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// JiraWorkflow : Details of a workflow.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct JiraWorkflow {
    /// The creation date of the workflow.
    #[serde(rename = "created", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub created: Option<Option<String>>,
    /// The description of the workflow.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The ID of the workflow.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Indicates if the workflow can be edited.
    #[serde(rename = "isEditable", skip_serializing_if = "Option::is_none")]
    pub is_editable: Option<bool>,
    #[serde(rename = "loopedTransitionContainerLayout", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub looped_transition_container_layout: Option<Option<Box<models::WorkflowLayout>>>,
    /// The name of the workflow.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "scope", skip_serializing_if = "Option::is_none")]
    pub scope: Option<Box<models::WorkflowScope>>,
    #[serde(rename = "startPointLayout", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub start_point_layout: Option<Option<Box<models::WorkflowLayout>>>,
    /// The statuses referenced in this workflow.
    #[serde(rename = "statuses", skip_serializing_if = "Option::is_none")]
    pub statuses: Option<Vec<models::WorkflowReferenceStatus>>,
    /// If there is a current [asynchronous task](#async-operations) operation for this workflow.
    #[serde(rename = "taskId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub task_id: Option<Option<String>>,
    /// The transitions of the workflow. Note that a transition can have either the deprecated `to`/`from` fields or the `toStatusReference`/`links` fields, but never both nor a combination.
    #[serde(rename = "transitions", skip_serializing_if = "Option::is_none")]
    pub transitions: Option<Vec<models::WorkflowTransitions>>,
    /// The last edited date of the workflow.
    #[serde(rename = "updated", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub updated: Option<Option<String>>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<Box<models::DocumentVersion>>,
}

impl JiraWorkflow {
    /// Details of a workflow.
    pub fn new() -> JiraWorkflow {
        JiraWorkflow {
            created: None,
            description: None,
            id: None,
            is_editable: None,
            looped_transition_container_layout: None,
            name: None,
            scope: None,
            start_point_layout: None,
            statuses: None,
            task_id: None,
            transitions: None,
            updated: None,
            version: None,
        }
    }
}

