/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-076cd4f44b0487c600c6a2c6fd87f6323c1ed5c5
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RolePayload : The payload used to create a project role. It is optional for CMP projects, as a default role actor will be provided. TMP will add new role actors to the table.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RolePayload {
    /// The default actors for the role. By adding default actors, the role will be added to any future projects created
    #[serde(rename = "defaultActors", skip_serializing_if = "Option::is_none")]
    pub default_actors: Option<Vec<models::ProjectCreateResourceIdentifier>>,
    /// The description of the role
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The name of the role
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The strategy to use when there is a conflict with an existing project role. FAIL - Fail execution, this always needs to be unique; USE - Use the existing entity and ignore new entity parameters
    #[serde(rename = "onConflict", skip_serializing_if = "Option::is_none")]
    pub on_conflict: Option<OnConflict>,
    #[serde(rename = "pcri", skip_serializing_if = "Option::is_none")]
    pub pcri: Option<Box<models::ProjectCreateResourceIdentifier>>,
    /// The type of the role. Only used by project-scoped project
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
}

impl RolePayload {
    /// The payload used to create a project role. It is optional for CMP projects, as a default role actor will be provided. TMP will add new role actors to the table.
    pub fn new() -> RolePayload {
        RolePayload {
            default_actors: None,
            description: None,
            name: None,
            on_conflict: None,
            pcri: None,
            r#type: None,
        }
    }
}
/// The strategy to use when there is a conflict with an existing project role. FAIL - Fail execution, this always needs to be unique; USE - Use the existing entity and ignore new entity parameters
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OnConflict {
    #[serde(rename = "FAIL")]
    Fail,
    #[serde(rename = "USE")]
    Use,
    #[serde(rename = "NEW")]
    New,
}

impl Default for OnConflict {
    fn default() -> OnConflict {
        Self::Fail
    }
}
/// The type of the role. Only used by project-scoped project
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "HIDDEN")]
    Hidden,
    #[serde(rename = "VIEWABLE")]
    Viewable,
    #[serde(rename = "EDITABLE")]
    Editable,
}

impl Default for Type {
    fn default() -> Type {
        Self::Hidden
    }
}

