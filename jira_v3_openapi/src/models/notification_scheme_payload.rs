/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-4f9780d932de14e7c3dec0c9382f8855050fda22
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// NotificationSchemePayload : The payload for creating a notification scheme. The user has to supply the ID for the default notification scheme. For CMP this is provided in the project payload and should be left empty, for TMP it's provided using this payload
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NotificationSchemePayload {
    /// The description of the notification scheme
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The name of the notification scheme
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The events and notifications for the notification scheme
    #[serde(rename = "notificationSchemeEvents", skip_serializing_if = "Option::is_none")]
    pub notification_scheme_events: Option<Vec<models::NotificationSchemeEventPayload>>,
    /// The strategy to use when there is a conflict with an existing entity
    #[serde(rename = "onConflict", skip_serializing_if = "Option::is_none")]
    pub on_conflict: Option<OnConflict>,
    #[serde(rename = "pcri", skip_serializing_if = "Option::is_none")]
    pub pcri: Option<Box<models::ProjectCreateResourceIdentifier>>,
}

impl NotificationSchemePayload {
    /// The payload for creating a notification scheme. The user has to supply the ID for the default notification scheme. For CMP this is provided in the project payload and should be left empty, for TMP it's provided using this payload
    pub fn new() -> NotificationSchemePayload {
        NotificationSchemePayload {
            description: None,
            name: None,
            notification_scheme_events: None,
            on_conflict: None,
            pcri: None,
        }
    }
}
/// The strategy to use when there is a conflict with an existing entity
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OnConflict {
    #[serde(rename = "FAIL")]
    Fail,
    #[serde(rename = "USE")]
    Use,
    #[serde(rename = "NEW")]
    New,
}

impl Default for OnConflict {
    fn default() -> OnConflict {
        Self::Fail
    }
}

