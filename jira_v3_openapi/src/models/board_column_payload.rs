/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-4f9780d932de14e7c3dec0c9382f8855050fda22
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// BoardColumnPayload : The payload for creating a board column
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BoardColumnPayload {
    /// The maximum issue constraint for the column
    #[serde(rename = "maximumIssueConstraint", skip_serializing_if = "Option::is_none")]
    pub maximum_issue_constraint: Option<i64>,
    /// The minimum issue constraint for the column
    #[serde(rename = "minimumIssueConstraint", skip_serializing_if = "Option::is_none")]
    pub minimum_issue_constraint: Option<i64>,
    /// The name of the column
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The status IDs for the column
    #[serde(rename = "statusIds", skip_serializing_if = "Option::is_none")]
    pub status_ids: Option<Vec<models::ProjectCreateResourceIdentifier>>,
}

impl BoardColumnPayload {
    /// The payload for creating a board column
    pub fn new() -> BoardColumnPayload {
        BoardColumnPayload {
            maximum_issue_constraint: None,
            minimum_issue_constraint: None,
            name: None,
            status_ids: None,
        }
    }
}

