/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-076cd4f44b0487c600c6a2c6fd87f6323c1ed5c5
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ScopePayload : The payload for creating a scope. Defines if a project is team-managed project or company-managed project
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScopePayload {
    /// The type of the scope. Use `GLOBAL` or empty for company-managed project, and `PROJECT` for team-managed project
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
}

impl ScopePayload {
    /// The payload for creating a scope. Defines if a project is team-managed project or company-managed project
    pub fn new() -> ScopePayload {
        ScopePayload {
            r#type: None,
        }
    }
}
/// The type of the scope. Use `GLOBAL` or empty for company-managed project, and `PROJECT` for team-managed project
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "GLOBAL")]
    Global,
    #[serde(rename = "PROJECT")]
    Project,
}

impl Default for Type {
    fn default() -> Type {
        Self::Global
    }
}

